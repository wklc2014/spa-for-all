第8章 函数

1. 一次定义，多次调用，实现代码复用。
2. javascript 函数是参数化的，
函数定义会包括一个称为【形参 parameter 】的标识符列表，
这些参数在函数体中像局部变量一样工作
3. 函数调用会为形参提供【实参值 argument 】。
4. 函数通过实参的值来计算返回值，成为该函数调用表达式的值。
5. 本次调用的上下文 - this

6. 如果函数挂载在一个对象上，就称为对象的方法。
上下文就是这个对象
7. 用于初始化一个新创建的对象的函数，称为【构造函数】

8. 在 javascript 中，函数即对象：
可以给函数设置属性和方法。
9. 函数可以嵌套 - 【闭包 closure 】概念


8.1 函数定义
function 关键字
1. 语句声明式定义函数
function f() {}
2. 表达式方式定义函数
var f = function() {}

ps: 声明语句会提前，赋值语句不会提前。

ps: 【函数命名】
1. 描述性强，简洁
2. 下划线式；
3. 驼峰式；
4. 内部函数或私有函数：下划线前缀
5. 先定义，再调用
6. return 语句导致函数停止执行

嵌套函数


8.2 函数调用
4种调用方式：
1. 作为函数
2. 作为方法
3. 作为构造函数
4. 通过它们的 call() 和 apply() 方法间接调用

8.2.1 普通函数调用
f(argumenrts);
函数体中不能使用 this 关键字

ps:
1. 判断是否是严格模式
var strict = (function() { return !this; }());
2. 非严格模式：全局对象
3. 严格模式：undefined

8.2.2 方法调用
ps:
1. 和普通函数调用的一个重要区别就是：上下文
2. 调用时会传入一个隐式的实参（方法调用的【母体】）：
rect.setSize(w, h);
setSize(rect, w, h);

3. 方法的链式调用返回 this
4. 和构造函数的链式调用的区别

8.2.3 构造函数调用
有 new 关键字

1. 没有形参，调用时允许省略圆括号，以下等价：
var o = new Object();
var o = new Object;
2. 返回一个新的空对象，
继承构造函数的 prototype 属性，
构造函数初始化这个新对象，
这个新对象作为调用上下文
3. 通常不使用 return 关键字
1) 默认隐式返回这个新对象
2）return 一个对象，表达式值为这个对象
3）return 原始值，返回这个新对象
3）return 没有值，返回这个新对象

8.2.4 间接调用
函数也是对象，函数对象也可以包含方法
call()
apply()
1. 显式指定 this
2. 任何函数都可以作为任何对象的方法来调用，
哪怕这个函数不是这个对象的方法
3. 可以指定实参
4. call() 使用自有的实参列表作为函数实参
5. apply() 要求以数组形式传入参数


8.3 函数实参和形参
1. 不检验【形参】【实参】类型
2. 不检验形参个数

8.3.1 可选形参
1. 实参比形参数量少，
形参为 undefined
2. 可选形参放最后，
调用时无法省略第一个实参并传入第二个实参
3. 可选实参传入一个无意义的占位符，惯用做法是传入 null undefined

8.3.2 可变长的实参列表：实参对象
1. arguments
2. 类数组
3. 省略的实参都将是 undefined
4. 多出的参数会自动省略
5. 称为【不定实参函数】



