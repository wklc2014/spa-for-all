第9章 类和模块

每个 Javascript 对象都是一个属性集合，相互之间没有任何联系。
在 Javascript 中也可以定义对象的类，让每个对象都共享某些属性。

1. javascript 中类的实现是基于原型继承机制。

javascript 弱类型面向对象编程

2. javascript 中类的一个重要特性是【动态可继承】


9.1 类和原型

1. 类的所有实例对象都从同一个原型对象上继承属性


9.2 类和构造函数

1. 构造函数是用来初始化新创建的对象的。
2. 使用关键字 new 来调用构造函数。
3. 自动创建一个新的对象。
4. 调用构造函数的一个重要特征是：构造函数的 prototype 属性被用作新对象的原型。
5. 这意味着通过同一个构造函数创建的所有对象都继承自一个相同的对象。

构造函数就是用来创建新对象的，必须通过 new 关键字调用


9.2.1 构造函数和类的标识

1. 原型对象是类的唯一标识：
当且仅当两个对象继承自同一个原型对象时，它们才是属于同一个类的实例。
2. 两个构造函数的 prototype 属性可能指向同一个原型对象，
那么这两个构造函数创建的实例是属于同一个类的。
3. 构造函数是类的【外在表现】。
构造函数的名字通常用作类名。

instanceof 检查对象是否属于某个类

[prototype]是关键


9.2.2 constructor 属性

Function.bind() ???

1. 每个 Javascript 函数都自动拥有一个 prototype 属性
这个属性的值是一个对象。
这个对象包含唯一一个不可枚举属性 constructor 。
constructor 属性的值是一个函数对象。
var F = function(){};
var p = F.prototype;
var c = p.constructor;
c === F;
F.prototype.constructor === F

构造函数的原型中存在预先定义好的 constructor属性，
这意味着对象通常继承的 constructor 均指代它们的构造函数。
var o = new F();
o.constructor === F

ps: 一般我们自定义的类的原型，没有定义 constructor 属性，
所以该类的实例也不含有 constructor 属性
可以修正：
两种修正方法：
1）显式给原型添加一个构造函数
2）使用预定义的原型对象，预定义的原型对象包含 constructor 属性
然后依次给原型对象添加方法


9.3 Javascript 中 java 式的类继承
实例字段
实例方法
类字段
类方法

1. javascript 中类牵扯三种不同的对象
1）构造函数对象
2）原型对象
3）实例对象

定义类的三步骤：
1）定义构造函数，并初始化
2）定义构造函数的 prototype 对象上的实例方法
3）给构造函数定义类字段和类属性

类中常规约定：
1）大写字母不能修改
2）下划线前缀外部不可见


9.4 类的扩充
javascript 中基于原型的继承机制是动态的：
1. 对象从其原型继承属性，
2. 如果创建对象之后，原型的属性发生改变，也会影响到继承这个原型的所有实例对象
3. 这意味着我们可以通过给原型对象，添加新方法来扩充 javascript 类
4. javascript 内置类的原型对象也是一样如此开放

Object.definePrototype()


9.5 类和类型
javascript 中的数据类型：
1) null
2) undefined
3) boolean
4) number
5) string
6) function && object

typeof 可以得出值的类型
classof

【鸭式辩型】？？？

9.5.1 instanceof 运算符

1) instanceof
o instanceof f
这个继承不一定是直接继承
实际检查的是对象的继承关系，而非构造函数

构造函数是类的公共标识，但原型是唯一的标识

2) isPrototypeOf
检测对象的原型链上是否存在某个特定的原型对象：
Range.prototyoe.isPrototypeOf(r)

instanceof 和 isPrototypeOf 的缺点是：
无法通过对象来获得类名，只能检测对象是否属于指定的类名

9.5.2 constructor 属性
因为构造函数是类的公共标识，所以最直接的方法就是使用 constructor 属性

缺点：不说所有对象都包含 constructor 属性。
多窗口、多框架子页面中无法正常工作


9.5.3 构造函数的名称


9.5.4 鸭式辩型

ps:
Array 的实例：包含一个值是非负整数的 length 属性
内置类的方法都是不可枚举的


9.6 javascript 中的面向对象技术

9.6.1 一个例子：集合类
9.6.2
9.6.3 标准转换方法
toString();
toLocaleString();
toValue();

9.6.4 比较方法
9.6.5 方法借用
9.6.6 私有状态
9.6.7 构造函数的重载荷工厂方法


9.7 子类

9.8 ECMAScript 5 中的类



