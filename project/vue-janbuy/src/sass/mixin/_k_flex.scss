@charset 'utf-8';
//----------------------------------------------------------------------
@mixin k-flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%k-flexbox {
	@include k-flexbox;
}

//----------------------------------
@mixin k-inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%k-inline-flex {
	@include k-inline-flex;
}

//----------------------------------------------------------------------
// Flexbox Direction
// 定义主轴方向（子元素排列方向）
// Values: row | row-reverse | column | column-reverse
// Default: row
@mixin k-flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Shorter version:
@mixin k-flex-dir($args...) {
	@include k-flex-direction($args...);
}

//----------------------------------------------------------------------
// Flexbox Wrap
// 定义主轴是否换行
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
@mixin k-flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------
// Flexbox Flow (shorthand)
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
@mixin k-flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------
// Flexbox Justify Content
// 定义主轴对齐方式
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
@mixin k-justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Shorter version:
@mixin k-flex-just($args...) {
	@include k-justify-content($args...);
}

//----------------------------------------------------------------------
// Flexbox Align Items
// 定义侧轴对齐方式
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
@mixin k-align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

//----------------------------------------------------------------------
// Flexbox Align Content
// 定义多根轴线的对齐方式
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
@mixin k-align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

//----------------------------------------------------------------------
// Flexbox Order
// 定义子元素排列顺序
// Default: 0
@mixin k-flex-order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------
// Flexbox Grow
// 定义项目放大比例
// Default: 0 如果存在剩余空间，也不放大
@mixin k-flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------
// Flexbox Shrink
// 定义项目缩小比例
// Default: 1
@mixin k-flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------
// Flexbox Basis
// 定义项目默认宽度
// Values: Like "width"
// Default: auto
@mixin k-flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------
// Flexbox "Flex" (shorthand)
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
@mixin k-flex($fg: 1, $fs: null, $fb: null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------
// Flexbox Align Self
// 定义单个项目对齐方式
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin k-align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}
